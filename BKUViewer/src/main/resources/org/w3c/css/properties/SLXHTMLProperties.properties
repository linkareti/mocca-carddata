# All properties for all media

# CSS2 Properties

# Margin spacing
#
# The margin-top, margin-bottom, margin-left and margin-right properties 
# must be supported by a Citizen Card Environment. Values specified as percentages 
# (cf. section 3.5.1.2) should be supported.
#
# The margin property may be supported by a Citizen Card Environment.
#
# An instance document must not contain a negative value in the properties mentioned 
# above. Otherwise it must be rejected by the Citizen Card Environment.

margin-top:                     at.gv.egiz.bku.slxhtml.css.CssMarginTopSLXHTML
margin-bottom:                  at.gv.egiz.bku.slxhtml.css.CssMarginBottomSLXHTML
margin-left:                    at.gv.egiz.bku.slxhtml.css.CssMarginLeftSLXHTML
margin-right:                   at.gv.egiz.bku.slxhtml.css.CssMarginRightSLXHTML
margin:                         at.gv.egiz.bku.slxhtml.css.CssMarginSLXHTML

# Padding spacing
#
# The padding-top, padding-bottom, padding-left and padding-right properties must be 
# supported by a Citizen Card Environment. Values specified as percentages (cf. section 
# 3.5.1.2) should be supported.
#
# The padding property may be supported by a Citizen Card Environment.
#
# An instance document must not contain a negative value in the properties 
# mentioned above. Otherwise it must be rejected by the Citizen Card Environment.

padding-top:                    at.gv.egiz.bku.slxhtml.css.CssPaddingTopSLXHTML
padding-bottom:                 at.gv.egiz.bku.slxhtml.css.CssPaddingBottomSLXHTML
padding-left:                   at.gv.egiz.bku.slxhtml.css.CssPaddingLeftSLXHTML
padding-right:                  at.gv.egiz.bku.slxhtml.css.CssPaddingRightSLXHTML
padding:                        at.gv.egiz.bku.slxhtml.css.CssPaddingSLXHTML

#
# Borders
#

# Border width
#
# The border-top-width, border-bottom-width, border-left-width, border-right-width 
# and border-width properties should be supported by a Citizen Card Environment. If 
# the properties are supported, the predefined values thin, medium and thick should 
# also be supported (cf. [CSS 2], section 8.5.1). 

border-top-width:               org.w3c.css.properties.css1.CssBorderTopWidthCSS2
border-right-width:             org.w3c.css.properties.css1.CssBorderRightWidthCSS2
border-left-width:              org.w3c.css.properties.css1.CssBorderLeftWidthCSS2
border-bottom-width:            org.w3c.css.properties.css1.CssBorderBottomWidthCSS2

# Border colour
#
# The border-top-color, border-bottom-color, border-left-color, border-right-color 
# and border-color properties should be supported by a Citizen Card Environment. The 
# predefined value transparent for the border-color property may be supported (cf. 
# [CSS 2], section 8.5.2).

border-top-color:               at.gv.egiz.bku.slxhtml.css.CssBorderTopColorSLXHTML
border-right-color:             at.gv.egiz.bku.slxhtml.css.CssBorderRightColorSLXHTML
border-left-color:              at.gv.egiz.bku.slxhtml.css.CssBorderLeftColorSLXHTML
border-bottom-color:            at.gv.egiz.bku.slxhtml.css.CssBorderBottomColorSLXHTML

# Border style
# 
# The border-top-style, border-bottom-style, border-left-style, border-right-style and 
# border-style properties should be supported by a Citizen Card Environment. If the properties 
# are supported, the predefined values none, dashed, dotted, solid and double should also 
# be supported; all other values may be supported (cf. [CSS 2], section 8.5.3).

border-top-style:               org.w3c.css.properties.css1.CssBorderTopStyleCSS2
border-right-style:             org.w3c.css.properties.css1.CssBorderRightStyleCSS2
border-left-style:              org.w3c.css.properties.css1.CssBorderLeftStyleCSS2
border-bottom-style:            org.w3c.css.properties.css1.CssBorderBottomStyleCSS2

# Shorthand
#
# The properties for the shorthand version of the border properties (border-top, 
# border-bottom, border-left, border-right and border (cf. [CSS 2], section 8.5.4) 
# should be supported by a Citizen Card Environment. The recommended values result 
# from the three previous sections.

border-width:                   org.w3c.css.properties.css1.CssBorderWidthCSS2
border-color:                   at.gv.egiz.bku.slxhtml.css.CssBorderColorSLXHTML
border-style:                   org.w3c.css.properties.css1.CssBorderStyleCSS2
border-top:                     org.w3c.css.properties.css1.CssBorderTopCSS2
border-right:                   org.w3c.css.properties.css1.CssBorderRightCSS2
border-left:                    org.w3c.css.properties.css1.CssBorderLeftCSS2
border-bottom:                  org.w3c.css.properties.css1.CssBorderBottomCSS2
border:                         at.gv.egiz.bku.slxhtml.css.CssBorderSLXHTML

#
# Positioning of boxes
#

# Box type
#
# The property for controlling the box type (display) may be supported by a Citizen 
# Card Environment (cf. [CSS 2], section 9.2).

display:                        org.w3c.css.properties.css1.CssDisplayCSS2

# Positioning scheme
#
# The property for defining the positioning scheme for a box (position, cf. [CSS 2], 
# section 9.3) must not be contained in an instance document to prevent content 
# from overlapping. Otherwise the instance document must be rejected by the Citizen 
# Card Environment.

#! position:                       org.w3c.css.properties.css1.CssPosition

# Box spacing
# 
# The property for defining the positioning scheme for a box (top, bottom, left, right; 
# cf. [CSS 2], section 9.3) must not be contained in an instance document to prevent 
# content from overlapping. Otherwise the instance document must be rejected by the 
# Citizen Card Environment. 
 
#! top:                            org.w3c.css.properties.css1.CssTop
#! right:                          org.w3c.css.properties.css1.CssRight
#! left:                           org.w3c.css.properties.css1.CssLeft
#! bottom:                         org.w3c.css.properties.css1.CssBottom
 
# Flow around boxes
#
# The properties for defining the flow around boxes (float, clear) may be supported by 
# a Citizen Card Environment (cf. [CSS 2], section 9.5).

float:                          org.w3c.css.properties.css1.CssFloat
clear:                          org.w3c.css.properties.css1.CssClear

# Positioning of boxes on the z-axis
#
# The property for defining the positioning of boxes on the z-axis (z-index, cf. [CSS 2], 
# section 9.9) must not be contained in an instance document to prevent content from 
# overlapping. Otherwise the instance document must be rejected by the Citizen Card Environment.

#! z-index:                        org.w3c.css.properties.css1.CssZIndex

# Text direction
#
# The properties for controlling the text direction (direction, unicode-bidi) may be 
# supported by a Citizen Card Environment (cf. [CSS 2], section 9.10).

direction:                      org.w3c.css.properties.css1.CssDirection
unicode-bidi:                   org.w3c.css.properties.css1.CssUnicodeBidi

#
# Displaying boxes
#

# Width and height
#
# The properties for specifying the width and height of a box (width, height, cf. [CSS 2], 
# sections 10.2 and 10.5) must not be supported by a Citizen Card Environment to prevent 
# content from overlapping. Otherwise the instance document must be rejected by the 
# Citizen Card Environment.
# 
# The properties for specifying the minimum width and height of a box (min-width, min-height) 
# may be supported by a Citizen Card Environment (cf. [CSS 2], sections 10.4 and 10.7).
# 
# The properties for specifying the maximum width and height of a box (max-width, max-height, 
# cf. [CSS 2], sections 10.4 and 10.7) must not be supported by a Citizen Card Environment 
# to prevent content from overlapping. Otherwise the instance document must be rejected by 
# the Citizen Card Environment. 

#! width:                          org.w3c.css.properties.css1.CssWidth
min-width:                      org.w3c.css.properties.css1.CssMinWidth
#! max-width:                      org.w3c.css.properties.css1.CssMaxWidth
min-height:                     org.w3c.css.properties.css1.CssMinHeight
#! max-height:                     org.w3c.css.properties.css1.CssMaxHeight
#! height:                         org.w3c.css.properties.css1.CssHeight

# Line height
#
# The properties for specifying the line height (line-height, vertical-align) should be 
# supported by a Citizen Card (cf. [CSS 2], section 10.8). The only exception is the 
# vertical-align property: In this case a Citizen Card Environment must be able to interpret 
# the values sub and super.

line-height:                    org.w3c.css.properties.css1.CssLineHeightCSS2
vertical-align:                 org.w3c.css.properties.css1.CssVerticalAlign

#
# Visible area in boxes
#

# The property for specifying the visibility of a box (visibility) may be supported by a 
# Citizen Card Environment (cf. [CSS 2], section 11).
#
# The properties for controlling the visible area of a box (overflow, clip; cf. [CSS 2], 
# section 11) must not be contained in an instance document to prevent hidden content. Otherwise 
# the instance document must be rejected by the Citizen Card Environment.

#! overflow:                       org.w3c.css.properties.css1.CssOverflow
#! clip:                           org.w3c.css.properties.css1.CssClip
visibility:                     org.w3c.css.properties.css1.CssVisibility

#
# Generated content, numbering, lists
#

# Generated content
#
# The property for generating content (content) may be supported by a Citizen Card Environment 
# (cf. [CSS 2], section 12.2).

content:                        org.w3c.css.properties.css1.CssContentCSS2

# Displaying quotation marks
#
# The property for displaying quotation marks (quotes) may be supported by a Citizen Card 
# Environment (cf. [CSS 2], section 12.3).

quotes:                         org.w3c.css.properties.css1.CssQuotes

# Numbering
#
# The properties for automatic numbering (counter-reset, counter-increment) may be supported 
# by a Citizen Card Environment (cf. [CSS 2], section 12.5).

counter-reset:                  org.w3c.css.properties.css1.CssCounterReset
counter-increment:              org.w3c.css.properties.css1.CssCounterIncrement

#
# Markers and lists
#

# Marker spacing
# 
# The property for defining the space between a marker and the associated box 
# (marker-offset) may be supported by a Citizen Card Environment (cf. [CSS 2], 
# section 12.6.1).

marker-offset:                  org.w3c.css.properties.css1.CssMarkerOffset

# List symbols
#
# For the property for selecting the list symbol (list-style-type) a Citizen 
# Card Environment must support the values none, disc, circle, square, decimal, 
# decimal-leading-zero, lower-roman, upper-roman, lower-alpha, lower-latin, 
# upper-alpha and upper-latin. The other values may be supported (cf. [CSS 2], 
# section 12.6.2).

list-style-type:                org.w3c.css.properties.css1.CssListStyleTypeCSS2

# Position of the list symbol
#
# The property for positioning the list symbol in relation to the associated box 
# (list-style-position) should be supported by a Citizen Card Environment (cf. [CSS 2], 
# section 12.6.2).

list-style-position:            org.w3c.css.properties.css1.CssListStylePositionCSS2

# Image as a list symbol
#
# The property for selecting an image as a list symbol (list-style-image) may be supported 
# by a Citizen Card Environment (cf. [CSS 2], section 12.6.2). If the Citizen Card Environment 
# supports this property, then it must proceed in respect of the integration of the image 
# in the signature as described in section 2.1.7. 

# optional, not supported:
#! list-style-image:               org.w3c.css.properties.css1.CssListStyleImageCSS2

# Shorthand
#
# The property for the shorthand version of the list properties (list-style) should be supported 
# by a Citizen Card Environment. The recommended values result from the explanations for the 
# list-style-type, list-style-position and list-style-image properties above (cf. [CSS 2], 
# section 12.6.2).

list-style:                     org.w3c.css.properties.css1.CssListStyleCSS2

# Page-based media
#
# The properties for page-based media may be supported by a Citizen Card Environment (size, marks, 
# page-break-before, page-break-inside, page-break-after, page, orphans and widows (cf. [CSS 2], 
# section 13).

page-break-before:              org.w3c.css.properties.paged.PageBreakBefore
page-break-after:               org.w3c.css.properties.paged.PageBreakAfter
page-break-inside:              org.w3c.css.properties.paged.PageBreakInside
page:                           org.w3c.css.properties.paged.Page
orphans:                        org.w3c.css.properties.paged.Orphans
widows:                         org.w3c.css.properties.paged.Widows

@page.size:                     org.w3c.css.properties.paged.Size
@page.marks:                    org.w3c.css.properties.paged.Marks
@page.page-break-before:        org.w3c.css.properties.paged.PageBreakBefore
@page.page-break-after:         org.w3c.css.properties.paged.PageBreakAfter
@page.page-break-inside:        org.w3c.css.properties.paged.PageBreakInside
@page.page:                     org.w3c.css.properties.paged.Page
@page.orphans:                  org.w3c.css.properties.paged.Orphans
@page.widows:                   org.w3c.css.properties.paged.Widows


#
# Colours and background
#

# A Citizen Card Environment must support all the options for specifying a colour listed in [CSS 2], 
# section 4.3.6 for a CSS property, if such an option is available for this property according to [CSS 2].
#
# The exceptions are the system colours (cf. [CSS 2], section 18.2); these must not be used in an 
# instance document so as to prevent dependencies on the system environment. Otherwise the instance 
# document must be rejected by the Citizen Card Environment.

# Colour

# The property for defining the foreground colour of the content of an element (color) must be 
# supported by a Citizen Card Environment (cf. [CSS 2], section 14.1).

color:                          at.gv.egiz.bku.slxhtml.css.CssColorSLXHTML

# Background
#
# The property for defining the background colour of the content of an element (background-color) 
# must be supported by a Citizen Card Environment (cf. [CSS 2], section 14.2.1).
#
# The properties for selecting and controlling an image as background (background-image, background-repeat, 
# background-position, background-attachment; cf. [CSS 2], section 14.2.1) must not be contained in an 
# instance document to prevent content from overlapping. Otherwise the instance document must be 
# rejected by the Citizen Card Environment.

# The property for the shorthand version of the background properties (background) should be supported 
# by a Citizen Card Environment. The recommended values result from the explanations for the background-color 
# property above (cf. [CSS 2], section 14.2.1). If the property contains values for selecting and controlling 
# an image as background, the instance document must be rejected by the Citizen Card Environment.

background-color:               at.gv.egiz.bku.slxhtml.css.CssBackgroundColorSLXHTML
#! background-image:               org.w3c.css.properties.css1.CssBackgroundImageCSS2
#! background-repeat:              org.w3c.css.properties.css1.CssBackgroundRepeatCSS2
#! background-attachment:          org.w3c.css.properties.css1.CssBackgroundAttachmentCSS2
#! background-position:            org.w3c.css.properties.css1.CssBackgroundPositionCSS2
background:                     at.gv.egiz.bku.slxhtml.css.CssBackgroundSLXHTML

#
# Fonts
#
#
# For the property for selecting a font family (font-family), a Citizen Card Environment must 
# support the predefined values serif, sans-serif and monospaced for the general font families. 
# All other values may be supported by a Citizen Card Environment (cf. [CSS 2], section 15.2.2).
#
# If a preferred font family is specified in the instance document that cannot be displayed by the 
# Citizen Card Environment, then the Citizen Card Environment may still display the instance 
# document if another displayable font family has been specified as an alternative. For example, 
# if the specification in the instance document is font-family: "Times New Roman", serif, then the 
# Citizen Card Environment may display the instance document in the secure viewer even if it does 
# not know the Times New Roman font family (as it must always support serif).

font-family:                    org.w3c.css.properties.css1.CssFontFamilyCSS2

# Font style
#
# The properties for defining the font style (font-style) and font weight (font-weight) 
# must be supported by a Citizen Card Environment. The values normal and italic must be supported, 
# while the value oblique should be supported.
# 
# The property for defining the font variant (font-variant) should be supported by a Citizen Card 
# Environment, while the property for defining the font stretch (font-stretch) may be supported 
# by a Citizen Card Environment (cf. [CSS 2], section 15.2.3).

font-style:                     org.w3c.css.properties.css1.CssFontStyleCSS2
font-weight:                    org.w3c.css.properties.css1.CssFontWeightCSS2
font-variant:                   org.w3c.css.properties.css1.CssFontVariantCSS2
font-stretch:                   org.w3c.css.properties.css1.CssFontStretchCSS2

# Font size
#
# The property for specifying the font size (font-size) must be supported by a Citizen 
# Card Environment. The property for specifying the stretch ratio (font-size-adjust) may 
# be supported by a Citizen Card Environment (cf. [CSS 2], section 15.2.4).

font-size:                      org.w3c.css.properties.css1.CssFontSizeCSS2
font-size-adjust:               org.w3c.css.properties.css1.CssFontSizeAdjustCSS2

# Shorthand
#
# The property for the shorthand version of the font properties (font) should be supported by 
# a Citizen Card Environment (cf. [CSS 2], section 15.2.5). The recommended values result from 
# the explanations above for the font-style, font-variant, font-weight, font-size and font-family 
# properties and the explanations for the line-height property in section 3.5.4.2.
#
# The additional, predefined values relating to the system fonts used (caption, icon, etc.) must 
# not be contained in an instance document so as to prevent dependencies on the system environment. 
# Otherwise the instance document must be rejected by the Citizen Card Environment. 

font:                           at.gv.egiz.bku.slxhtml.css.CssFontSLXHTML

#
# Displaying text
#

# Non-displayable characters
# 
# If the text of an instance document contains a character that cannot be displayed by the 
# Citizen Card Environment, then the instance document must be rejected by the Citizen Card 
# Environment. The character must not be represented by a placeholder.

# FIXME: How to implement?!

# Indent
#
# The property for indenting the first line of a text block (text-indent) should be supported 
# by a Citizen Card Environment (cf. [CSS 2], section 16.1).

text-indent:                    org.w3c.css.properties.css1.CssTextIndent

# Alignment
#
# For the property for aligning the content of a text block (text-align) a Citizen Card Environment 
# must support the values left, right and center. The value justified should be supported, 
# while the specification of a string value may be supported (cf. [CSS 2], section 16.2).

text-align:                     org.w3c.css.properties.css1.CssTextAlign

# Text decoration
#
# For the property for decorating a text (text-decoration; cf. [CSS 2], section 16.3.1) a 
# Citizen Card Environment must support the values none, underline and line-through.
#
# The value blink must not be contained in an instance document. Otherwise the instance 
# document must be rejected by the Citizen Card Environment.
#
# The other values may be supported by a Citizen Card Environment.

text-decoration:                at.gv.egiz.bku.slxhtml.css.CssTextDecorationSLXHTML

# Shadows
#
# The property for specifying a text shadow (text-shadow) may be supported by a Citizen Card 
# Environment (cf. [CSS 2], section 16.3.2).

text-shadow:                    org.w3c.css.properties.css1.CssTextShadow

# Word and letter spacing
#
# The word-spacing and letter-spacing should be supported by a Citizen Card Environment 
# (cf. [CSS 2], section 16.4).
#
# An instance document must not contain negative values in order to prevent content from 
# overlapping. Otherwise the instance document must be rejected by the Citizen Card Environment. 

word-spacing:                   at.gv.egiz.bku.slxhtml.css.CssWordSpacingSLXHTML
letter-spacing:                 at.gv.egiz.bku.slxhtml.css.CssLetterSpacingSLXHTML

# Capitalisation
#
# The property for specifying the capitalisation of the text of an element (text-transform) 
# may be supported by a Citizen Card Environment (cf. [CSS 2], section 16.5).

text-transform:                 org.w3c.css.properties.css1.CssTextTransform

# White space
#
# The property for the handling of white space within the text of an element (white-space) should 
# be supported by a Citizen Card Environment (cf. [CSS 2], section 16.6).

white-space:                    org.w3c.css.properties.css1.CssWhiteSpace

#
# Tables
#

# Position of caption
#
# A Citizen Card Environment should support the top and bottom properties for the property for 
# specifying the position when labelling a table (caption-side); the properties left and right 
# may be supported (cf. [CSS 2], section 17.4.1).

caption-side:                   org.w3c.css.properties.css2.table.CaptionSide

# Layout algorithm
#
# The property for defining the layout algorithm for a table (table-layout) may be supported by 
# a Citizen Card Environment (cf. [CSS 2], section 17.5.2).
#
# However, the fixed value must not be supported because the layout algorithm selected with it can 
# cause content to overlap.
#
# In general, the viewer component of the Citizen Card Environment must use a layout algorithm for a 
# table that does not generate an overflow, in other words with which the content of every table 
# element can be rendered so that it does not extend beyond the confines of the table element. 
# There is an example of such an algorithm in [CSS 2], section 17.5.2, subsection Automatic table layout.

table-layout:                   at.gv.egiz.bku.slxhtml.css.TableLayoutSLXHTML
row-span:                       org.w3c.css.properties.css2.table.RowSpan
column-span:                    org.w3c.css.properties.css2.table.ColumnSpan

# Borders
#
# The properties for displaying borders in tables (border-collapse, border-spacing, empty-cells) may 
# be supported by a Citizen Card Environment (cf. [CSS 2], section 17.6).

border-collapse:                org.w3c.css.properties.css2.table.BorderCollapse
border-spacing:                 org.w3c.css.properties.css2.table.BorderSpacing
empty-cells:                    org.w3c.css.properties.css2.table.EmptyCells

# Voice output
#
# The property for controlling the voice output of the column headers in a table (speak-header) may 
# be supported by a Citizen Card Environment (cf. [CSS 2], section 17.7.1).

speak-header:                   org.w3c.css.properties.css2.table.SpeakHeader

#
# User interface
#

# Cursor format
#
# The property for controlling the cursor format (cursor; cf. [CSS 2], section 18.1) must not be 
# contained in an instance document. Otherwise the instance document must be rejected by the Citizen 
# Card Environment. 

#! cursor:                         org.w3c.css.properties.css2.user.CursorCSS2

# Contours
#
# The properties for defining element contours (outline-width, outline-style, outline-color and 
# outline; cf. [CSS 2], section 18.4) must not be contained in an instance document. Otherwise the 
# instance document must be rejected by the Citizen Card Environment. 

#! outline:                        org.w3c.css.properties.css2.user.Outline
#! outline-width:                  org.w3c.css.properties.css2.user.OutlineWidth
#! outline-style:                  org.w3c.css.properties.css2.user.OutlineStyle
#! outline-color:                  org.w3c.css.properties.css2.user.OutlineColor

#
# Aural Properties
#
# The properties for the voice output of a document (cf. [CSS 2], section 19) may be supported 
# by a Citizen Card Environment.

volume:                         org.w3c.css.properties.aural.ACssVolume
pause-before:                   org.w3c.css.properties.aural.ACssPauseBefore
pause-after:                    org.w3c.css.properties.aural.ACssPauseAfter
pause:                          org.w3c.css.properties.aural.ACssPause
cue-before:                     org.w3c.css.properties.aural.ACssCueBefore
cue-after:                      org.w3c.css.properties.aural.ACssCueAfter
cue:                            org.w3c.css.properties.aural.ACssCue
play-during:                    org.w3c.css.properties.aural.ACssPlayDuring
voice-family:                   org.w3c.css.properties.aural.ACssVoiceFamily
elevation:                      org.w3c.css.properties.aural.ACssElevation
speech-rate:                    org.w3c.css.properties.aural.ACssSpeechRate
pitch:                          org.w3c.css.properties.aural.ACssPitch
pitch-range:                    org.w3c.css.properties.aural.ACssPitchRange
stress:                         org.w3c.css.properties.aural.ACssStress
richness:                       org.w3c.css.properties.aural.ACssRichness
speak-punctuation:              org.w3c.css.properties.aural.ACssSpeakPunctuation
speak-date:                     org.w3c.css.properties.aural.ACssSpeakDate
speak-numeral:                  org.w3c.css.properties.aural.ACssSpeakNumeral
speak-time:                     org.w3c.css.properties.aural.ACssSpeakTime
speak:                          org.w3c.css.properties.aural.ACssSpeak
azimuth:                        org.w3c.css.properties.aural.ACssAzimuth

#
# @page
#
# The @page rule for defining the page properties for page-based output media may be 
# supported by a Citizen Card Environment (cf. [CSS 2], section 13, and section 3.5.7 
# of this document). 
#

@page.margin-top:               org.w3c.css.properties.css1.CssMarginTop
@page.margin-bottom:            org.w3c.css.properties.css1.CssMarginBottom
@page.margin-left:              org.w3c.css.properties.css1.CssMarginLeft
@page.margin-right:             org.w3c.css.properties.css1.CssMarginRight
@page.margin:                   org.w3c.css.properties.css1.CssMargin
@page.padding-top:              org.w3c.css.properties.css1.CssPaddingTop
@page.padding-bottom:           org.w3c.css.properties.css1.CssPaddingBottom
@page.padding-left:             org.w3c.css.properties.css1.CssPaddingLeft
@page.padding-right:            org.w3c.css.properties.css1.CssPaddingRight
@page.padding:                  org.w3c.css.properties.css1.CssPadding
@page.border-top-width:         org.w3c.css.properties.css1.CssBorderTopWidthCSS2
@page.border-right-width:       org.w3c.css.properties.css1.CssBorderRightWidthCSS2
@page.border-left-width:        org.w3c.css.properties.css1.CssBorderLeftWidthCSS2
@page.border-bottom-width:      org.w3c.css.properties.css1.CssBorderBottomWidthCSS2
@page.border-top-color:         org.w3c.css.properties.css1.CssBorderTopColorCSS2
@page.border-right-color:       org.w3c.css.properties.css1.CssBorderRightColorCSS2
@page.border-left-color:        org.w3c.css.properties.css1.CssBorderLeftColorCSS2
@page.border-bottom-color:      org.w3c.css.properties.css1.CssBorderBottomColorCSS2
@page.border-top-style:         org.w3c.css.properties.css1.CssBorderTopStyleCSS2
@page.border-right-style:       org.w3c.css.properties.css1.CssBorderRightStyleCSS2
@page.border-left-style:        org.w3c.css.properties.css1.CssBorderLeftStyleCSS2
@page.border-bottom-style:      org.w3c.css.properties.css1.CssBorderBottomStyleCSS2
@page.border-width:             org.w3c.css.properties.css1.CssBorderWidthCSS2
@page.border-color:             org.w3c.css.properties.css1.CssBorderColorCSS2
@page.border-style:             org.w3c.css.properties.css1.CssBorderStyleCSS2
@page.border-top:               org.w3c.css.properties.css1.CssBorderTopCSS2
@page.border-right:             org.w3c.css.properties.css1.CssBorderRightCSS2
@page.border-left:              org.w3c.css.properties.css1.CssBorderLeftCSS2
@page.border-bottom:            org.w3c.css.properties.css1.CssBorderBottomCSS2
@page.border:                   org.w3c.css.properties.css1.CssBorderCSS2
@page.display:                  org.w3c.css.properties.css1.CssDisplayCSS2
@page.position:                 org.w3c.css.properties.css1.CssPosition
@page.z-index:                  org.w3c.css.properties.css1.CssZIndex
@page.direction:                org.w3c.css.properties.css1.CssDirection
@page.unicode-bidi:             org.w3c.css.properties.css1.CssUnicodeBidi
@page.top:                      org.w3c.css.properties.css1.CssTop
@page.right:                    org.w3c.css.properties.css1.CssRight
@page.left:                     org.w3c.css.properties.css1.CssLeft
@page.bottom:                   org.w3c.css.properties.css1.CssBottom
@page.float:                    org.w3c.css.properties.css1.CssFloat
@page.clear:                    org.w3c.css.properties.css1.CssClear

#
# @font-face
#
# The @font-face rule for describing or referencing additional font families (cf. [CSS 2], 
# section 15.3) must not be used in an instance document. The viewer component of the Citizen 
# Card Environment must reject an instance document containing a @font-face rule. 

#! @font-face.font-style:          org.w3c.css.properties.css2.font.FontStyle
#! @font-face.font-variant:        org.w3c.css.properties.css2.font.FontVariant
#! @font-face.font-weight:         org.w3c.css.properties.css2.font.FontWeight
#! @font-face.font-size:           org.w3c.css.properties.css2.font.FontSize
#! @font-face.font-family:         org.w3c.css.properties.css2.font.FontFamily
#! @font-face.font-stretch:        org.w3c.css.properties.css2.font.FontStretch
#! @font-face.unicode-range:       org.w3c.css.properties.css2.font.UnicodeRange
#! @font-face.units-per-em:        org.w3c.css.properties.css2.font.UnitsPerEm
#! @font-face.src:                 org.w3c.css.properties.css2.font.Src
#! @font-face.panose-1:            org.w3c.css.properties.css2.font.Panose1
#! @font-face.stemv:               org.w3c.css.properties.css2.font.Stemv
#! @font-face.stemh:               org.w3c.css.properties.css2.font.Stemh
#! @font-face.slope:               org.w3c.css.properties.css2.font.Slope
#! @font-face.cap-height:          org.w3c.css.properties.css2.font.CapHeight
#! @font-face.x-hegiht:            org.w3c.css.properties.css2.font.XHeight
#! @font-face.widths:              org.w3c.css.properties.css2.font.Widths
#! @font-face.ascent:              org.w3c.css.properties.css2.font.Ascent
#! @font-face.descent:             org.w3c.css.properties.css2.font.Descent
#! @font-face.bbox:                org.w3c.css.properties.css2.font.Bbox
#! @font-face.baseline:            org.w3c.css.properties.css2.font.Baseline
#! @font-face.centerline:          org.w3c.css.properties.css2.font.Centerline
#! @font-face.definition-src:      org.w3c.css.properties.css2.font.DefinitionSrc
#! @font-face.mathline:            org.w3c.css.properties.css2.font.Mathline
#! @font-face.topline:             org.w3c.css.properties.css2.font.Topline
